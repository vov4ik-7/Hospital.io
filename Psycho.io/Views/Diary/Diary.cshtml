@model Psycho.io.Models.Diary.DiaryViewModel

<link href="~/css/diary/diary.css" rel="stylesheet">

<div id="diaryUtils"
     class="display-none"
     add-diary-record-url="@Url.Action("AddDiaryRecord", "Diary")"
     remove-diary-record-url="@Url.Action("RemoveDiaryRecord", "Diary")"
     add-or-update-body-indicator-url="@Url.Action("AddOrUpdateBodyIndicator", "Diary")"
     remove-body-indicator-url="@Url.Action("RemoveBodyIndicator", "Diary")"
     change-diary-day-url="@Url.Action("ChangeDiaryDay", "Diary")">
</div>

<div class="row text-center">
    <div class="col-md-9 mb-4">
        <div class="card card-cascade cascading-admin-card user-card">
            <div class="admin-up d-flex justify-content-start">
                <i class="fas fa-running light-green py-4 mr-3 z-depth-2"></i>
                <div class="data">
                    <h5 class="font-weight-bold dark-grey-text">
                        Lifestyle
                    </h5>
                </div>
            </div>
            <div class="card-body card-body-cascade">
                <div id="lifestyle-container" class="col-md-12 mb-5 d-flex flex-wrap justify-content-between">
                    @foreach (var defaultLifestyle in Model.DefaultLifestyles)
                    {
                        @if (defaultLifestyle.Popover)
                        {
                            var unit = defaultLifestyle.LifestyleId == "drink-water"
                                ? "L"
                                : defaultLifestyle.LifestyleId == "weight"
                                    ? "kg"
                                    : defaultLifestyle.LifestyleId == "sleep"
                                        ? "h"
                                        : "°C";
                            var selectedLifestyle = "";
                            var inputedValue = 0m;
                            var record = Model.UserBodyIndicators.FirstOrDefault(r => r.Indicator == defaultLifestyle.LifestyleId);
                            if (record != null)
                            {
                                selectedLifestyle = "selected-lifestyle";
                                inputedValue = record.Value;
                            }
                            <div data-toggle="tooltip" title="@defaultLifestyle.LifestyleDescription" class="m-4">
                                <a data-toggle="modal" data-target="#@string.Format("{0}-modal", defaultLifestyle.LifestyleId)">
                                    <img id="@defaultLifestyle.LifestyleId" src="@string.Format("../img/diary/lifestyle/lifestyle-{0}.png", defaultLifestyle.LifestyleId)" class="md-avatar rounded-circle size-2 @selectedLifestyle" alt="image">
                                </a>
                            </div>

                            <div class="modal fade" id="@string.Format("{0}-modal", defaultLifestyle.LifestyleId)" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
                                 aria-hidden="true">
                                <div class="modal-dialog modal-sm" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h4 class="modal-title w-100">@defaultLifestyle.LifestyleDescription</h4>
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="input-group mb-3">
                                                <input id="@string.Format("{0}-input", defaultLifestyle.LifestyleId)" class="form-control lifestyle-input" type="number" value="@inputedValue" placeholder="" aria-label="" aria-describedby="@string.Format("{0}-addon", defaultLifestyle.LifestyleId)">
                                                <div class="input-group-append">
                                                    <span class="input-group-text" id="@string.Format("{0}-addon", defaultLifestyle.LifestyleId)">@unit</span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-light btn-sm" data-dismiss="modal">Close</button>
                                            <button type="button" class="btn btn-primary btn-sm" onclick="savePopupClick('@defaultLifestyle.LifestyleId')">Save</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            var selectedLifestyle = Model.UserLifestyles.Contains(defaultLifestyle.LifestyleId) ? "selected-lifestyle" : "";
                            <div data-toggle="tooltip" title="@defaultLifestyle.LifestyleDescription" class="m-4 simple-lifestyle-pick">
                                <a>
                                    <img id="@defaultLifestyle.LifestyleId" src="@string.Format("../img/diary/lifestyle/lifestyle-{0}.png", defaultLifestyle.LifestyleId)" class="md-avatar rounded-circle size-2 @selectedLifestyle" alt="image">
                                </a>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="card card-cascade cascading-admin-card user-card">
            <div class="admin-up d-flex justify-content-start">
                <i class="fas fa-thermometer-half light-blue lighten-2 py-4 mr-3 z-depth-2"></i>
                <div class="data">
                    <h5 class="font-weight-bold dark-grey-text">
                        Symptoms
                    </h5>
                </div>
            </div>
            <div class="card-body card-body-cascade">
                <div id="symptoms-container" class="col-md-12 mb-5 d-flex flex-wrap justify-content-between">
                    @foreach (var defaultSymptom in Model.DefaultSymptoms)
                    {
                        var selectedSymptom = @Model.UserSymptoms.Contains(defaultSymptom.SymptomId) ? "selected-symptom" : "";
                        <div data-toggle="tooltip" title="@defaultSymptom.SymptomDescription" class="m-4">
                            <a>
                                <img id="@defaultSymptom.SymptomId" src="@string.Format("../img/diary/symptoms/symptom-{0}.png", defaultSymptom.SymptomId)" class="md-avatar rounded-circle size-2 @selectedSymptom" alt="image">
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="card card-cascade cascading-admin-card user-card">
            <div class="admin-up d-flex justify-content-start">
                <i class="far fa-laugh-wink amber lighten-1 py-4 mr-3 z-depth-2"></i>
                <div class="data">
                    <h5 class="font-weight-bold dark-grey-text">
                        Mood
                    </h5>
                </div>
            </div>
            <div class="card-body card-body-cascade">
                <div id="mood-container" class="col-md-12 mb-5 d-flex flex-wrap justify-content-between">
                    @foreach(var defaultMood in Model.DefaultMoods)
                    {
                        var selectedMood = Model.UserMoods.Contains(defaultMood.MoodId) ? "selected-mood" : "";
                        <div data-toggle="tooltip" title="@defaultMood.MoodDescription" class="m-4">
                            <a>
                                <img id="@defaultMood.MoodId" src="@string.Format("../img/diary/mood/mood-{0}.png", defaultMood.MoodId)" class="md-avatar rounded-circle size-2 @selectedMood" alt="image">
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-4">
        <div style="margin-top: 100px;">
            <div class="/*col-md-10 offset-md-1*/">
                <div id="miniCalendar" data-language='en' class=""></div>
            </div>
        </div>
    </div>
</div>

<script>
    var globalCurrentDate = new Date();

    $('#miniCalendar').datepicker({
        inline: true,
        todayButton: new Date(),
        maxDate: new Date(),
        onSelect: function (formattedDate, date, inst) {
            globalCurrentDate = date;
            changeDiaryDay(date);
        }
    });

    $('[data-toggle="tooltip"]').tooltip()

    $(document).on("click", "#lifestyle-container .simple-lifestyle-pick img", function () {
        if ($(this).hasClass("selected-lifestyle")) {
            $(this).removeClass("selected-lifestyle");
            removeDiaryRecord($(this).attr('id'), 'lifestyle', globalCurrentDate);
        } else {
            $(this).addClass("selected-lifestyle");
            addDiaryRecord($(this).attr('id'), 'lifestyle', globalCurrentDate);
        }
    });

    $(document).on("click", "#symptoms-container img", function () {
        if ($(this).hasClass("selected-symptom")) {
            $(this).removeClass("selected-symptom");
            removeDiaryRecord($(this).attr('id'), 'symptom', globalCurrentDate);
        } else {
            $(this).addClass("selected-symptom");
            addDiaryRecord($(this).attr('id'), 'symptom', globalCurrentDate);
        }
    });

    $(document).on("click", "#mood-container img", function () {
        if ($(this).hasClass("selected-mood")) {
            $(this).removeClass("selected-mood");
            removeDiaryRecord($(this).attr('id'), 'mood', globalCurrentDate);
        } else {
            $(this).addClass("selected-mood");
            addDiaryRecord($(this).attr('id'), 'mood', globalCurrentDate);
        }
    });

    function savePopupClick(lifeStyleId) {
        var input = $(`#${lifeStyleId}-input`).val();
        if (input) {
            $(`#${lifeStyleId}`).addClass("selected-lifestyle");
            addOrUplateBodyIndicator(input, lifeStyleId, globalCurrentDate);
        } else {
            $(`#${lifeStyleId}`).removeClass("selected-lifestyle");
            removeBodyIndicator(lifeStyleId, globalCurrentDate);
        }
        $(`#${lifeStyleId}-modal`).modal('hide');
    }

    function addDiaryRecord(value, blockName, date) {
        $.ajax({
            url: $("#diaryUtils").attr("add-diary-record-url"),
            method: "POST",
            data: {value: value,blockName: blockName,date: date.toDateString()
            }
        });
    }

    function removeDiaryRecord(value, blockName, date) {
        $.ajax({
            url: $("#diaryUtils").attr("remove-diary-record-url"),
            method: "POST",
            data: {value: value,blockName: blockName,date: date.toDateString()}
        });
    }

    function addOrUplateBodyIndicator(value, indicator, date) {
        $.ajax({
            url: $("#diaryUtils").attr("add-or-update-body-indicator-url"),
            method: "POST",
            data: { value: value, indicator: indicator, date: date.toDateString() }
        });
    }

    function removeBodyIndicator(indicator, date) {
        $.ajax({
            url: $("#diaryUtils").attr("remove-body-indicator-url"),
            method: "POST",
            data: { indicator: indicator, date: date.toDateString() }
        });
    }

    function changeDiaryDay(date) {
        $.ajax({
            url: $("#diaryUtils").attr("change-diary-day-url"),
            method: "POST",
            data: { date: date.toDateString() },
            success: function (data) {
                $("#lifestyle-container img").removeClass("selected-lifestyle");
                $(".lifestyle-input").val(0);
                $("#symptoms-container img").removeClass("selected-symptom");
                $("#mood-container img").removeClass("selected-mood");

                $.each(data.userLifestyles, (index, value) => $(`#${value}`).addClass("selected-lifestyle"));
                $.each(data.bodyIndicators, (index, obj) => {
                    $(`#${obj.indicator}-input`).val(obj.value);
                    $(`#${obj.indicator}`).addClass("selected-lifestyle")
                });
                $.each(data.userSymptoms, (index, value) => $(`#${value}`).addClass("selected-symptom"));
                $.each(data.userMoods, (index, value) => $(`#${value}`).addClass("selected-mood"));
            }
        });
    }
</script>
