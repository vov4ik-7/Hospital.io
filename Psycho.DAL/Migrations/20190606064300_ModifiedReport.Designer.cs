// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Psycho.DAL.Persistence;

namespace Psycho.DAL.Migrations
{
    [DbContext(typeof(PsychoContext))]
    [Migration("20190606064300_ModifiedReport")]
    partial class ModifiedReport
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo");

                    b.Property<int>("AuthorizedUserId");

                    b.Property<DateTime?>("EndDataTime");

                    b.Property<int>("PsychologistId");

                    b.Property<DateTime?>("StartDataTime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedUserId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.AppointmentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId");

                    b.Property<string>("DoctorConclusion");

                    b.Property<bool?>("IsHealth");

                    b.Property<int?>("NextAppointmentId");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("NextAppointmentId");

                    b.ToTable("AppointmentResults");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("ReceiverId");

                    b.Property<int>("SenderId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorizedUserId");

                    b.Property<bool>("IsAnonymous");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Message");

                    b.Property<int>("PsychologistId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedUserId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<bool>("Blocked");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.WorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Day")
                        .IsRequired();

                    b.Property<string>("EndTime");

                    b.Property<int>("PsychologistId");

                    b.Property<string>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("PsychologistId", "Day")
                        .IsUnique();

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.AnonymousUser", b =>
                {
                    b.HasBaseType("Psycho.DAL.Core.Domain.User");


                    b.ToTable("AnonymousUser");

                    b.HasDiscriminator().HasValue("AnonymousUser");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.AuthorizedUser", b =>
                {
                    b.HasBaseType("Psycho.DAL.Core.Domain.User");

                    b.Property<int?>("Age");

                    b.Property<int?>("Height");

                    b.Property<int?>("Weight");

                    b.ToTable("AuthorizedUser");

                    b.HasDiscriminator().HasValue("AuthorizedUser");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.Psychologist", b =>
                {
                    b.HasBaseType("Psycho.DAL.Core.Domain.User");

                    b.Property<DateTime>("HireDate");

                    b.Property<string>("Position");

                    b.ToTable("Psychologist");

                    b.HasDiscriminator().HasValue("Psychologist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Psycho.DAL.Core.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.Appointment", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.AuthorizedUser", "AuthorizedUser")
                        .WithMany("Appointments")
                        .HasForeignKey("AuthorizedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Psycho.DAL.Core.Domain.Psychologist", "Psychologist")
                        .WithMany("Appointments")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.AppointmentResult", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.Appointment", "Appointment")
                        .WithOne("Result")
                        .HasForeignKey("Psycho.DAL.Core.Domain.AppointmentResult", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Psycho.DAL.Core.Domain.Appointment", "NextAppointment")
                        .WithMany()
                        .HasForeignKey("NextAppointmentId");
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.Chat", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.User", "Receiver")
                        .WithMany("ChatReceiver")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Psycho.DAL.Core.Domain.User", "Sender")
                        .WithMany("ChatSender")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.Report", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.AuthorizedUser", "AuthorizedUser")
                        .WithMany("Reports")
                        .HasForeignKey("AuthorizedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Psycho.DAL.Core.Domain.Psychologist", "Psychologist")
                        .WithMany("Reports")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.User", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Psycho.DAL.Core.Domain.WorkSchedule", b =>
                {
                    b.HasOne("Psycho.DAL.Core.Domain.Psychologist", "Psychologist")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
